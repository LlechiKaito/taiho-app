services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - /app/dist
    env_file:
      - ./backend/.env
    environment:
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - DYNAMODB_ORDERS_TABLE_NAME=orders
      - NODE_ENV=development
    depends_on:
      - dynamodb-local
    networks:
      - taiho-network
    command: ["npm", "run", "dev"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    env_file:
      - ./frontend/.env
    depends_on:
      - backend
    networks:
      - taiho-network

  dynamodb-local:
    image: amazon/dynamodb-local:latest
    container_name: dynamodb-local
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    ports:
      - "8000:8000"
    networks:
      - taiho-network



  dynamodb-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - AWS_REGION=ap-northeast-1
      - AWS_ACCESS_KEY_ID=local
      - AWS_SECRET_ACCESS_KEY=local
      - DYNAMODB_ENDPOINT=http://dynamodb-local:8000
      - DYNAMODB_ORDERS_TABLE_NAME=orders
    depends_on:
      - dynamodb-local
    networks:
      - taiho-network
    command: ["sh", "-c", "sleep 10 && node scripts/create-dynamodb-table.js"]
    restart: "no"

  dynamodb-admin:
    image: aaronshaf/dynamodb-admin:latest
    container_name: dynamodb-admin
    environment:
      - DYNAMO_ENDPOINT=dynamodb-local:8000
    ports:
      - "8001:8001"
    depends_on:
      - dynamodb-local
    networks:
      - taiho-network

volumes:
  dynamodb_data:
    driver: local

networks:
  taiho-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 